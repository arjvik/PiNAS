version: "3.9"

services:
  traefik:
    image: traefik
    command:
      - --api.dashboard=true
      - --providers.docker=true
      - --providers.docker.exposedbydefault=false
      - --entrypoints.web.address=:80
      - --entrypoints.web.http.redirections.entrypoint.to=websecure
      - --entrypoints.web.http.redirections.entrypoint.scheme=https
      - --entrypoints.web.http.redirections.entrypoint.permanent=true
      - --entrypoints.websecure.address=:443
      - --entrypoints.websecure.http.tls.certresolver=leresolver
      - --entrypoints.websecure.http.tls.domains[0].main=${TRAEFIK_HOSTNAME:?}
      - --log.level=info
      - --accesslog=true
      - --certificatesresolvers.leresolver.acme.dnschallenge=true
      - --certificatesresolvers.leresolver.acme.dnschallenge.provider=cloudflare
      - --certificatesresolvers.leresolver.acme.storage=/srv/acme.json
      - --certificatesresolvers.leresolver.acme.caserver=${TRAEFIK_ACME_SERVER:-https://acme-v02.api.letsencrypt.org/directory}
    restart: on-failure
    environment:
      CLOUDFLARE_DNS_API_TOKEN: ${TRAEFIK_CLOUDFLARE_DNS_API_TOKEN:?}
    ports:
      - 80:80
      - 443:443
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /mnt/NAS1/@data/config/traefik/acme.json:/srv/acme.json
    labels:
      traefik.enable: true
      traefik.http.routers.dashboard.rule: PathPrefix(`/dashboard`) || PathPrefix(`/api`)
      traefik.http.routers.dashboard.service: api@internal
      traefik.http.routers.dashboard.entrypoints: websecure
      traefik.http.routers.dashboard.middlewares: ip-whitelist,basicauth,dashboard-add-trailing-slash
      traefik.http.middlewares.dashboard-add-trailing-slash.redirectregex.regex: (^.*\/dashboard$$)
      traefik.http.middlewares.dashboard-add-trailing-slash.redirectregex.replacement: $$1/
      traefik.http.middlewares.dashboard-add-trailing-slash.redirectregex.permanent: true
      traefik.http.middlewares.ip-whitelist.ipwhitelist.sourceRange: ${TRAEFIK_IP_WHITELIST:?}
      traefik.http.middlewares.basicauth.basicauth.users: ${TRAEFIK_BASICAUTH_HASHED_PASSWORD:?}
  sftpgo:
    image: drakkan/sftpgo:v2-alpine-slim
    command: sh -c "env | sed -Ene 's/^SFTPGOCUSTOM_(\\w*)=(.*)$$/s#\\\\$$\\1#\\2#g/p' | sed -f- /srv/sftpgo-template.json > /tmp/sftpgo.json && exec sftpgo serve"
    restart: on-failure
    environment:
      SFTPGO_SFTPD__HOST_KEYS: /srv/id_ed25519
      SFTPGO_WEBDAVD__BINDINGS__0__PORT: 8000
      SFTPGO_WEBDAVD__BINDINGS__0__PREFIX: /dav
      SFTPGO_HTTPD__WEB_ROOT: /sftpgo
      SFTPGO_DATA_PROVIDER__DRIVER: memory
      SFTPGO_LOADDATA_FROM: /tmp/sftpgo.json
      SFTPGOCUSTOM_USER1_USERNAME: ${SFTPGO_USER1_USERNAME:?}
      SFTPGOCUSTOM_USER1_PASSWORD: ${SFTPGO_USER1_PASSWORD:?}
      SFTPGOCUSTOM_USER1_SSH_KEYS: ${SFTPGO_USER1_SSH_KEYS:?}
      SFTPGOCUSTOM_USER2_USERNAME: ${SFTPGO_USER2_USERNAME:?}
      SFTPGOCUSTOM_USER2_PASSWORD: ${SFTPGO_USER2_PASSWORD:?}
      SFTPGOCUSTOM_USER3_USERNAME: ${SFTPGO_USER3_USERNAME:?}
      SFTPGOCUSTOM_USER3_PASSWORD: ${SFTPGO_USER3_PASSWORD:?}
      SFTPGOCUSTOM_USER4_USERNAME: ${SFTPGO_USER4_USERNAME:?}
      SFTPGOCUSTOM_USER4_PASSWORD: ${SFTPGO_USER4_PASSWORD:?}
      SFTPGOCUSTOM_ADMIN_USERNAME: ${SFTPGO_ADMIN_USERNAME:?}
      SFTPGOCUSTOM_ADMIN_PASSWORD: ${SFTPGO_ADMIN_PASSWORD:?}
    ports:
      - 2222:2022
    volumes:
      - /mnt/NAS1/@data/share:/srv/share
      - /mnt/NAS1/@data/config/sftpgo/id_ed25519:/srv/id_ed25519:ro
      - ./sftpgo/sftpgo-backup.json:/srv/sftpgo-template.json:ro
    labels:
      traefik.enable: true
      traefik.http.services.sftpgo-web.loadbalancer.server.port: 8080
      traefik.http.routers.sftpgo-web.rule: PathPrefix(`/sftpgo`)
      traefik.http.routers.sftpgo-web.service: sftpgo-web@docker
      traefik.http.routers.sftpgo-web.entrypoints: websecure
      traefik.http.routers.sftpgo-web.middlewares: ip-whitelist
      traefik.http.services.sftpgo-dav.loadbalancer.server.port: 8000
      traefik.http.routers.sftpgo-dav.rule: PathPrefix(`/dav`)
      traefik.http.routers.sftpgo-dav.service: sftpgo-dav@docker
      traefik.http.routers.sftpgo-dav.entrypoints: websecure
      traefik.http.routers.sftpgo-dav.middlewares: ip-whitelist
  index:
    image: pierrezemb/gostatic
    command: -enable-logging
    restart: on-failure
    volumes:
      - ./index/index.html:/srv/http/index.html:ro
      - ./index/cameras.html:/srv/http/cameras:ro
      - ./.git/refs/heads/master:/srv/http/commit.txt:ro
    labels:
      traefik.enable: true
      traefik.http.services.index.loadbalancer.server.port: 8043
      traefik.http.routers.index.rule: PathPrefix(`/`)
      traefik.http.routers.index.entrypoints: websecure
      traefik.http.routers.index.middlewares: ip-whitelist
  samba:
    build: ./samba
    restart: on-failure
    ports:
      - 445:445
    volumes:
      - /mnt/NAS1/@data/share/files/shared/scans:/mnt/scans
      - ./samba/smb.conf:/etc/samba/smb.conf:ro
  pihole:
    image: pihole/pihole
    entrypoint: ["bash", "-c"]
    command:
      - sed -e 's/hash=$$(HashPassword "$$PASSWORD")/hash="$$PASSWORD"/' -i /opt/pihole/webpage.sh && rm -f /etc/pihole/gravity{,_old}.db && exec /s6-init
    restart: on-failure
    ports:
      - 53:53/tcp
      - 53:53/udp
    volumes:
      - ./pihole/adlists.list:/etc/pihole/adlists.list:ro
    environment:
      TZ: ${PIHOLE_TIMEZONE:?}
      WEBPASSWORD: ${PIHOLE_HASHED_WEBPASSWORD:?}
      WEBTHEME: default-dark
      PIHOLE_DNS_: ${PIHOLE_UPSTREAM_DNS:?}
      FTLCONF_REPLY_ADDR4: ${PIHOLE_LAN_IPV4:?}
      FTLCONF_REPLY_ADDR6: ${PIHOLE_LAN_IPV6:?}
      FTLCONF_RATE_LIMIT: 10000/60
      WEBLOGS_STDOUT: 1
      DNSMASQ_LISTENING: all
    healthcheck:
      disable: true
    dns:
      - 127.0.0.1
      - ${PIHOLE_BACKUP_DNS:?}
    extra_hosts:
      - ${PIHOLE_HOSTNAME:?}:${PIHOLE_LAN_IPV4:?}
      - ${PIHOLE_HOSTNAME:?}:${PIHOLE_LAN_IPV6:?}
    labels:
      traefik.enable: true
      traefik.http.services.pihole.loadbalancer.server.port: 80
      traefik.http.routers.pihole.rule: PathPrefix(`/pihole`)
      traefik.http.routers.pihole.entrypoints: websecure
      traefik.http.routers.pihole.middlewares: ip-whitelist,basicauth,pihole-replace-prefix
      traefik.http.middlewares.pihole-replace-prefix.replacepathregex.regex: /pihole/(.*)
      traefik.http.middlewares.pihole-replace-prefix.replacepathregex.replacement: /admin/$$1
  iperf3:
    build: ./iperf3
    restart: on-failure
    ports:
      - 5201:5201
  apprise:
    image: caronc/apprise
    entrypoint: ["bash", "-c"]
    command:
      - tr '|' $$'\n' <<<"$$SERVICE_URLS" >/config/main.cfg && exec gunicorn -c /opt/apprise/webapp/gunicorn.conf.py core.wsgi --workers 1 --threads 1 -b $$(ip -o addr show dev eth0 | grep -Po '(?<=inet )[0-9.]+'):80
    restart: on-failure
    environment:
      SERVICE_URLS: ${APPRISE_NOTIFICATION_URLS:?}
      APPRISE_ALLOW_SERVICES: ntfys
      APPRISE_STATEFUL_MODE: simple
      APPRISE_CONFIG_LOCK: 'yes'
  btrfs-maintenance:
    build: ./btrfs-maintenance
    restart: on-failure
    privileged: true
  ipcamera-mjpeg1:
    build: ./ipcamera
    restart: on-failure
    environment:
      CAMERA_FEED: ${IPCAMERA_FEED_1:?}
    labels:
      traefik.enable: true
      traefik.http.services.ipcamera-mjpeg1.loadbalancer.server.port: 9000
      traefik.http.routers.ipcamera-mjpeg1.rule: PathPrefix(`/mjpeg1`)
      traefik.http.routers.ipcamera-mjpeg1.entrypoints: websecure
      traefik.http.routers.ipcamera-mjpeg1.middlewares: ip-whitelist,basicauth,mjpeg-strip-prefix
      traefik.http.middlewares.mjpeg-strip-prefix.stripprefixregex.regex: /mjpeg[0-9]
  ipcamera-mjpeg2:
    build: ./ipcamera
    restart: on-failure
    environment:
      CAMERA_FEED: ${IPCAMERA_FEED_2:?}
    labels:
      traefik.enable: true
      traefik.http.services.ipcamera-mjpeg2.loadbalancer.server.port: 9000
      traefik.http.routers.ipcamera-mjpeg2.rule: PathPrefix(`/mjpeg2`)
      traefik.http.routers.ipcamera-mjpeg2.entrypoints: websecure
      traefik.http.routers.ipcamera-mjpeg2.middlewares: ip-whitelist,basicauth,mjpeg-strip-prefix
  ipcamera-mjpeg3:
    build: ./ipcamera
    restart: on-failure
    environment:
      CAMERA_FEED: ${IPCAMERA_FEED_3:?}
    labels:
      traefik.enable: true
      traefik.http.services.ipcamera-mjpeg3.loadbalancer.server.port: 9000
      traefik.http.routers.ipcamera-mjpeg3.rule: PathPrefix(`/mjpeg3`)
      traefik.http.routers.ipcamera-mjpeg3.entrypoints: websecure
      traefik.http.routers.ipcamera-mjpeg3.middlewares: ip-whitelist,basicauth,mjpeg-strip-prefix
  cloudflared:
    build: ./cloudflared
    command:
      - >
        busybox rm -rf ~/.cloudflared && busybox mkdir ~/.cloudflared &&
        echo '${CLOUDFLARED_CERTIFICATES:?}' | busybox base64 -d > ~/.cloudflared/cert.pem &&
        echo '${CLOUDFLARED_SSH_TUNNEL_CREDENTIALS:?}' > ~/.cloudflared/${CLOUDFLARED_SSH_TUNNEL_UUID:?}.json &&
        exec cloudflared --no-autoupdate tunnel run ${CLOUDFLARED_SSH_TUNNEL_NAME:?}
    restart: on-failure
    environment:
      TUNNEL_URL: ${CLOUDFLARED_SSH_TUNNEL_ENDPOINT:?}
    extra_hosts:
      - docker.host:host-gateway
